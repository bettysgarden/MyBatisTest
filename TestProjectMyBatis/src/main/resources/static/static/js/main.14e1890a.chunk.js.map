{"version":3,"sources":["controller/TreeNodeService.js","model/Model.js","controller/Events.js","controller/Controller.js","view/TreeItem.js","view/TreeRoot.js","view/AllNodesTable.js","view/SelectedNodeForm.js","view/UIPanel.js","view/PopupEditor.js","App.js","reportWebVitals.js","index.js"],"names":["TreeNodeService","this","baseUrl","_rest","_getRestOptions","nodeId","parentId","node","id","servlet","options","requestUrl","console","log","fetch","then","_status","_json","_log","catch","_onRestError","type","body","method","mode","cache","credentials","headers","redirect","referrerPolicy","undefined","JSON","stringify","response","status","Promise","resolve","reject","Error","statusText","text","parse","error","allNodes","tree","expandedNodesId","selectedNodeId","expanded","includes","selected","children","nodes","n","_getById","map","_makeTreeNode","oldNode","getSelectedTreeNode","newNode","_getTreeNode","push","index","indexOf","splice","Events","_reset","_updateAllNodesTableState","_updateTreeRootState","_updateSelectedNodeFormState","_updateUIPanelState","_updatePopupEditorState","name","data","Model","selectItem","_setTreeRootState","togleItem","getChildren","result","setChildren","_setAllNodesTableState","_setPopupEditorState","getSelectedNodeId","deleteNode","toString","popupEditorState","event","updateNode","addNode","warn","_handler","allNodesTableState","isLoading","onAllNodesTableStateChanged","getAllNodes","treeRootState","treeNodes","getRootTreeNodes","onTreeRootStateChanged","setRootNodes","getRootNodes","selectedNodeFormState","selectedNode","onSelectedNodeFormStateChanged","getNode","_setSelectedNodeFormState","uiPanelState","onUIPanelStateChanged","_setUIPanelState","visible","onPopupEditorStateChanged","TreeItem","props","childrenBlock","treeNode","handler","className","onClick","TreeRoot","AllNodesTable","ip","port","SelectedNodeForm","UIPanel","hasNoSelectedNode","disabled","_nullToDefault","val","def","_emptyToNull","PopupEditor","React","useState","_validForText","stateNode","setStateNode","_input","e","target","value","onChange","_validForObject","App","Controller","setTreeRootState","setAllNodesTableState","setSelectedNodeFormState","setUIPanelState","setPopupEditorState","getHandler","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14e1890a.chunk.js","sourcesContent":["class TreeNodeServiceImpl {\n\n    constructor() {\n        this.baseUrl = \"http://localhost:8181/v1/nodes/\";\n    }\n\n    getAllNodes() {\n        return this._rest(\"\", this._getRestOptions('GET'));\n    }\n\n    getRootNodes() {\n        return this._rest(\"root\", this._getRestOptions('GET'));\n    }\n\n    getNode(nodeId) {\n        return this._rest(nodeId, this._getRestOptions('GET'));\n    }\n\n    getChildren(parentId) {\n        return this._rest(parentId + \"/children\", this._getRestOptions('GET'));\n    }\n\n    updateNode(node) {\n        return this._rest(node.id, this._getRestOptions('PUT', node));\n    }\n\n    addNode(node) {\n        return this._rest(\"\", this._getRestOptions('POST', node));\n    }\n\n    deleteNode(nodeId) {\n        return this._rest(nodeId, this._getRestOptions('DELETE'));\n    }\n\n    _rest(servlet, options) {\n        let requestUrl = this.baseUrl + servlet;\n        console.log(\">>> \", requestUrl, options);\n        return fetch(requestUrl, options)\n            .then(this._status)\n            .then(this._json)\n            .then(this._log)\n            .catch(this._onRestError);\n    }\n\n    _getRestOptions(type, body) {\n        let options = {\n            method: type,                   // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors',                   // no-cors, *cors, same-origin\n            cache: 'no-cache',              // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'omit',            // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            redirect: 'follow',             // manual, *follow, error\n            referrerPolicy: 'no-referrer'  // no-referrer, *client\n        };\n\n        if (body !== undefined) {\n            options.body = JSON.stringify(body);\n        }\n\n        return options;\n    }\n\n    _status(response) {\n        if (response.status >= 200 && response.status < 300) {\n            return Promise.resolve(response)\n        } else {\n            return Promise.reject(new Error(response.statusText))\n        }\n    }\n\n    _json(response) {\n        return response.text().then(function (text) {\n            return text ? JSON.parse(text) : {}\n        });\n    }\n\n    _log(response) {\n        console.log(\"<<< \", response);\n        return Promise.resolve(response);\n    }\n\n    _onRestError(error) {\n        return Promise.reject(new Error(error))\n    }\n}\n\nexport const TreeNodeService = new TreeNodeServiceImpl();","class Model {\n\n    constructor() {\n        this.allNodes = [];\n        this.tree = [];\n        this.expandedNodesId = [];\n        this.selectedNodeId = undefined;\n    }\n\n    _makeTreeNode(node) {\n        return {\n            ...node,\n            expanded: this.expandedNodesId.includes(node.id),\n            selected: this.selectedNodeId === node.id,\n            children: [],\n        }\n    }\n\n    _getById(nodeId, nodes) {\n        for (let node of nodes) {\n            if (node.id === nodeId) {\n                return node;\n            }\n            if (node.children) {\n                let n = this._getById(nodeId, node.children);\n                if (n) {\n                    return n;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    _getTreeNode(nodeId) {\n        return this._getById(nodeId, this.tree);\n    }\n\n    setRootNodes(nodes) {\n        this.expandedNodesId = [];\n        this.selectedNodeId = undefined;\n        this.tree = nodes.map(node => this._makeTreeNode(node));\n    }\n\n    getRootTreeNodes() {\n        return this.tree;\n    }\n\n    selectItem(nodeId) {\n        let oldNode = this.getSelectedTreeNode();\n        if (oldNode) {\n            oldNode.selected = false;\n        }\n        this.selectedNodeId = nodeId;\n        let newNode = this.getSelectedTreeNode();\n        if (newNode) {\n            newNode.selected = true;\n        }\n    }\n\n    togleItem(nodeId) {\n        let oldNode = this._getTreeNode(nodeId);\n        oldNode.expanded = !oldNode.expanded;\n        if (oldNode.expanded) {\n            this.expandedNodesId.push(nodeId);\n            return true;\n        }\n\n        const index = this.expandedNodesId.indexOf(nodeId);\n        if (index > -1) {\n            this.expandedNodesId.splice(index, 1);\n        }\n        oldNode.children = [];\n        return false;\n    }\n\n    setChildren(parentId, children) {\n        let oldNode = this._getTreeNode(parentId);\n        oldNode.children = children.map(node => this._makeTreeNode(node));\n    }\n\n    getSelectedNodeId() {\n        return this.selectedNodeId;\n    }\n\n    getSelectedTreeNode() {\n        return this._getTreeNode(this.selectedNodeId);\n    }\n}\n\nexport default new Model();\n","export const Events = {\n    onRefreshAllNodes: \"onRefreshAllNodes\",\n    onItemClicked: \"onItemClicked\",\n    onExpandClicked: \"onExpandClicked\",\n    onAddRootNodeClicked: \"onAddRootNodeClicked\",\n    onAddNodeClicked: \"onAddNodeClicked\",\n    onEditNodeClicked: \"onEditNodeClicked\",\n    onDeleteNodeClicked: \"onDeleteNodeClicked\",\n    onPopupEditorSaveClicked: \"onPopupEditorSaveClicked\",\n    onPopupEditorCancelClicked: \"onPopupEditorCancelClicked\",\n}","import { TreeNodeService } from \"./TreeNodeService\";\nimport Model from \"../model/Model\"\nimport { Events } from \"./Events\";\n\nclass Controller {\n\n    constructor() {\n        this._reset();\n    }\n\n    _reset() {\n        this._updateAllNodesTableState();\n        this._updateTreeRootState();\n        this._updateSelectedNodeFormState();\n        this._updateUIPanelState();\n        this._updatePopupEditorState();\n    }\n\n    _handler(name, data) {\n        console.log(\"Controller::handler > \", name, data);\n\n        switch (name) {\n\n            case Events.onRefreshAllNodes:\n                this._updateAllNodesTableState();\n                break;\n\n            case Events.onItemClicked:\n                Model.selectItem(data);\n                this._setTreeRootState(undefined, false);\n                this._updateSelectedNodeFormState();\n                this._updateUIPanelState();\n                break;\n\n            case Events.onExpandClicked:\n                let isNeedToUpdate = Model.togleItem(data);\n                if (!isNeedToUpdate) {\n                    this._setTreeRootState(undefined, false);\n                    break;\n                }\n                TreeNodeService.getChildren(data)\n                    .then((result) => {\n                        Model.setChildren(data, result);\n                        this._setTreeRootState(undefined, false);\n                    })\n                    .catch((error) => { this._setAllNodesTableState(error, false); });\n                break;\n\n            case Events.onAddRootNodeClicked:\n                this._setPopupEditorState(true, name, {});\n                break;\n\n            case Events.onAddNodeClicked:\n                this._setPopupEditorState(true, name, { parentId: Model.getSelectedNodeId() });\n                break;\n\n            case Events.onEditNodeClicked:\n                this._setPopupEditorState(true, name, Model.getSelectedTreeNode());\n                break;\n\n            case Events.onDeleteNodeClicked:\n                TreeNodeService.deleteNode(Model.getSelectedNodeId())\n                    .then(() => { this._reset() })\n                    .catch((error) => { throw new Error(\"Delete node error:\" + error.toString()); });\n                break;\n\n            case Events.onPopupEditorSaveClicked:\n\n                if (this.popupEditorState.event === Events.onEditNodeClicked) {\n                    TreeNodeService.updateNode(data)\n                        .then(() => { this._reset() })\n                        .catch((error) => { throw new Error(\"Save node error:\" + error.toString()); });\n\n                } else if (this.popupEditorState.event === Events.onAddNodeClicked || this.popupEditorState.event === Events.onAddRootNodeClicked) {\n                    TreeNodeService.addNode(data)\n                        .then(() => { this._reset() })\n                        .catch((error) => { throw new Error(\"Add node error:\" + error.toString()); });\n                }\n                break;\n\n            case Events.onPopupEditorCancelClicked:\n                this._updatePopupEditorState();\n                break;\n\n            default:\n                console.warn(`Unknown event: name=${name} , data=${data}`);\n                break;\n        }\n    }\n\n    getHandler() {\n        return (name, data) => { this._handler(name, data); }\n    }\n\n    // ##### AllNodesTableState\n    onAllNodesTableStateChanged(allNodesTableState) { }\n\n    _setAllNodesTableState(error, isLoading) {\n        this.allNodesTableState = {\n            error: error,\n            isLoading: isLoading,\n            nodes: Model.allNodes,\n        };\n        this.onAllNodesTableStateChanged(this.allNodesTableState);\n    }\n\n    _updateAllNodesTableState() {\n        Model.allNodes = [];\n        this._setAllNodesTableState(undefined, true);\n        TreeNodeService.getAllNodes()\n            .then((result) => {\n                Model.allNodes = result;\n                this._setAllNodesTableState(undefined, false);\n            })\n            .catch((error) => { this._setAllNodesTableState(error, false); });\n    }\n\n    // ##### TreeRootState\n    onTreeRootStateChanged(treeRootState) { }\n\n    _setTreeRootState(error, isLoading) {\n        this.treeRootState = {\n            error: error,\n            isLoading: isLoading,\n            treeNodes: Model.getRootTreeNodes(),\n        };\n        this.onTreeRootStateChanged(this.treeRootState);\n    }\n\n    _updateTreeRootState() {\n        Model.setRootNodes([]);\n        this._setTreeRootState(undefined, true);\n        TreeNodeService.getRootNodes()\n            .then((result) => {\n                Model.setRootNodes(result);\n                this._setTreeRootState(undefined, false);\n            })\n            .catch((error) => { this._setTreeRootState(error, false); });\n    }\n\n    // ##### SelectedNodeFormState\n    onSelectedNodeFormStateChanged(selectedNodeFormState) { }\n\n    _setSelectedNodeFormState(error, selectedNode) {\n        this.selectedNodeFormState = {\n            error: error,\n            selectedNode: selectedNode,\n        };\n        this.onSelectedNodeFormStateChanged(this.selectedNodeFormState);\n    }\n\n    _updateSelectedNodeFormState() {\n        let selectedNodeId = Model.getSelectedNodeId();\n        if (selectedNodeId !== undefined) {\n            TreeNodeService.getNode(selectedNodeId)\n                .then((result) => {\n                    this._setSelectedNodeFormState(undefined, result);\n                })\n                .catch((error) => { this._setSelectedNodeFormState(error, undefined); });\n\n        } else {\n            // dont have selection\n            this._setSelectedNodeFormState(undefined, undefined);\n        }\n    }\n\n    // ##### UIPanelState\n    onUIPanelStateChanged(uiPanelState) { }\n\n    _setUIPanelState(selectedNodeId) {\n        this.uiPanelState = {\n            selectedNodeId: selectedNodeId,\n        };\n        this.onUIPanelStateChanged(this.uiPanelState);\n    }\n\n    _updateUIPanelState() {\n        let selectedNodeId = Model.getSelectedNodeId();\n        this._setUIPanelState(selectedNodeId);\n    }\n\n    // ##### PopupEditorState\n    onPopupEditorStateChanged(popupEditorState) { }\n\n    _setPopupEditorState(visible, event, node) {\n        this.popupEditorState = {\n            visible: visible,\n            event: event,\n            node: node,\n        };\n        this.onPopupEditorStateChanged(this.popupEditorState);\n    }\n\n    _updatePopupEditorState() {\n        this._setPopupEditorState(false);\n    }\n}\n\nexport default new Controller();\n\n","import { Events } from \"../controller/Events\";\n\nexport default function TreeItem(props) {\n    const { id, name, expanded, selected, children } = props.treeNode;\n    const handler = props.handler;\n\n    function onItemClicked() {\n        handler(Events.onItemClicked, id);\n    }\n\n    function onExpandClicked() {\n        handler(Events.onExpandClicked, id);\n    }\n\n    let childrenBlock;\n    if (children) {\n        childrenBlock = children.map(node => (\n            <TreeItem key={node.id} treeNode={node} handler={handler} />\n        ));\n    }\n\n    return (\n        <div>\n            <div className={\"TreeItem\" + (selected ? \" selected\" : \"\")}>\n                <button onClick={onExpandClicked}>{expanded ? \"-\" : \"+\"}</button>\n                <div className={\"TreeItem-name\"} onClick={onItemClicked} >{name}({selected ? \"*\" : \".\"})</div>\n            </div>\n            <div className=\"TreeItem-children\">{childrenBlock}</div>\n        </div>\n    );\n};","import TreeItem from \"./TreeItem\";\n\nexport default function TreeRoot(props) {\n    const { error, isLoading, treeNodes } = props.treeRootState;\n    const handler = props.handler;\n\n    let result = (<div>...</div>);\n\n    if (isLoading) {\n        result = (<div>Loading...</div>);\n    } else if (error) {\n        result = (<div>{error.toString()}</div>);\n    } else {\n        result = treeNodes.map(treeNode => (\n            <TreeItem key={treeNode.id} treeNode={treeNode} handler={handler} />\n        ));\n    }\n\n    return (\n        <div className=\"form-container\">\n            {result}\n        </div>\n    );\n};","import { Events } from \"../controller/Events\";\n\nexport default function AllNodesTable(props) {\n    const { error, isLoading, nodes } = props.allNodesTableState;\n    const handler = props.handler;\n\n    let result = (<div>...</div>);\n\n    if (isLoading) {\n        result = (<div>Loading...</div>);\n    } else if (error) {\n        result = (<div>{error.toString()}</div>);\n    } else {\n        result = (\n            <table>\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>parentId</th>\n                        <th>name</th>\n                        <th>ip</th>\n                        <th>port</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {nodes.map(node => (\n                        <tr key={node.id}>\n                            <td>{node.id}</td>\n                            <td>{node.parentId}</td>\n                            <td>{node.name}</td>\n                            <td>{node.ip}</td>\n                            <td>{node.port}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        );\n    }\n\n    return (\n        <div className=\"form-container\">\n            <button onClick={() => handler(Events.onRefreshAllNodes)}>Refresh</button>\n            {result}\n        </div>\n    );\n};","export default function SelectedNodeForm(props) {\n\n    const { error, selectedNode } = props.selectedNodeFormState;\n\n    let result = (<div>...</div>);\n\n    if (error) {\n        result = (<div>{error.toString()}</div>);\n    } else if (selectedNode === undefined) {\n        result = (<div>no selection</div>);\n    } else {\n        result = (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>id</td>\n                        <td>{selectedNode.id}</td>\n                    </tr>\n                    <tr>\n                        <td>parentId</td>\n                        <td>{selectedNode.parentId}</td>\n                    </tr>\n                    <tr>\n                        <td>name</td>\n                        <td>{selectedNode.name}</td>\n                    </tr>\n                    <tr>\n                        <td>ip</td>\n                        <td>{selectedNode.ip}</td>\n                    </tr>\n                    <tr>\n                        <td>port</td>\n                        <td>{selectedNode.port}</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n\n    return (\n        <div className=\"form-container\">\n            {result}\n        </div>\n    );\n}","import { Events } from \"../controller/Events\";\n\nexport default function UIPanel(props) {\n    const { selectedNodeId } = props.uiPanelState;\n    const handler = props.handler;\n\n    const hasNoSelectedNode = selectedNodeId === undefined;\n\n    return (\n        <>\n            <button\n                onClick={() => handler(Events.onAddRootNodeClicked)}\n                className=\"UIPanelContainer_child\">Add root node</button>\n\n            <button\n                onClick={() => handler(Events.onAddNodeClicked, selectedNodeId)}\n                className=\"UIPanelContainer_child\"\n                disabled={hasNoSelectedNode}>Add child</button>\n\n            <button\n                onClick={() => handler(Events.onEditNodeClicked, selectedNodeId)}\n                className=\"UIPanelContainer_child\"\n                disabled={hasNoSelectedNode}>Edit</button>\n\n            <button\n                onClick={() => handler(Events.onDeleteNodeClicked, selectedNodeId)}\n                className=\"UIPanelContainer_child\"\n                disabled={hasNoSelectedNode}>Delete</button>\n\n            <div\n                className=\"UIPanelContainer_child\">selected node id={selectedNodeId}</div>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Events } from \"../controller/Events\";\n\nfunction _validForText(node) {\n    return {\n        id: _nullToDefault(node.id, \"null\"),\n        parentId: _nullToDefault(node.parentId, \"null\"),\n        name: _nullToDefault(node.name, \"node name\"),\n        ip: _nullToDefault(node.ip, \"0.0.0.0\"),\n        port: _nullToDefault(node.port, \"0\"),\n    }\n}\n\nfunction _nullToDefault(val, def) {\n    return (val === undefined || val === null) ? def : val;\n}\n\nfunction _emptyToNull(val) {\n    return (val === \"null\" || val === \"\") ? null : val\n}\n\nfunction _validForObject(node) {\n    return {\n        id: _emptyToNull(node.id),\n        parentId: _emptyToNull(node.parentId),\n        name: _emptyToNull(node.name),\n        ip: _emptyToNull(node.ip),\n        port: _emptyToNull(node.port),\n    }\n}\n\nexport default function PopupEditor(props) {\n    const { node } = props.popupEditorState;\n    const handler = props.handler;\n    const [stateNode, setStateNode] = React.useState(() => { return _validForText(node); });\n\n    function _input(e) {\n        const { name, value } = e.target;\n        setStateNode({\n            ...stateNode,\n            [name]: value\n        });\n    };\n\n    return (\n        <div className=\"PopupEditor\">\n            <div className=\"form-container PopupEditor-content\">\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>id</td>\n                            <td><input name=\"id\" value={stateNode.id} disabled={true} onChange={_input} /></td>\n                        </tr>\n                        <tr>\n                            <td>parentId</td>\n                            <td><input name=\"parentId\" value={stateNode.parentId} disabled={true} onChange={_input} /></td>\n                        </tr>\n                        <tr>\n                            <td>name</td>\n                            <td><input name=\"name\" value={stateNode.name} onChange={_input} /></td>\n                        </tr>\n                        <tr>\n                            <td>ip</td>\n                            <td><input name=\"ip\" value={stateNode.ip} onChange={_input} /></td>\n                        </tr>\n                        <tr>\n                            <td>port</td>\n                            <td><input name=\"port\" value={stateNode.port} onChange={_input} /></td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <div className=\"PopupEditor-ui\">\n                    <button\n                        onClick={() => handler(Events.onPopupEditorSaveClicked, _validForObject(stateNode))}\n                        className=\"UIPanelContainer_child\">Save</button>\n                    <button\n                        onClick={() => handler(Events.onPopupEditorCancelClicked)}\n                        className=\"UIPanelContainer_child\">Cancel</button>\n                </div>\n\n            </div>\n        </div>\n    );\n};","import React from \"react\";\nimport Controller from \"./controller/Controller\"\nimport TreeRoot from \"./view/TreeRoot\";\nimport AllNodesTable from \"./view/AllNodesTable\"\nimport SelectedNodeForm from \"./view/SelectedNodeForm\";\nimport UIPanel from \"./view/UIPanel\";\nimport PopupEditor from \"./view/PopupEditor\";\n\nfunction App() {\n\n  const [treeRootState, setTreeRootState] = React.useState(Controller.treeRootState);\n  Controller.onTreeRootStateChanged = setTreeRootState;\n\n  const [allNodesTableState, setAllNodesTableState] = React.useState(Controller.allNodesTableState);\n  Controller.onAllNodesTableStateChanged = setAllNodesTableState;\n\n  const [selectedNodeFormState, setSelectedNodeFormState] = React.useState(Controller.selectedNodeFormState);\n  Controller.onSelectedNodeFormStateChanged = setSelectedNodeFormState;\n\n  const [uiPanelState, setUIPanelState] = React.useState(Controller.uiPanelState);\n  Controller.onUIPanelStateChanged = setUIPanelState;\n\n  const [popupEditorState, setPopupEditorState] = React.useState(Controller.popupEditorState);\n  Controller.onPopupEditorStateChanged = setPopupEditorState;\n\n  return (\n    <div className=\"App\">\n      <h1>Client React Tree</h1>\n      <div className=\"TreeAndSelectionContainer\">\n        <div className=\"TreeAndSelectionContainer_child\">\n          <b>Tree:</b>\n          <TreeRoot treeRootState={treeRootState} handler={Controller.getHandler()} />\n        </div>\n        <div className=\"TreeAndSelectionContainer_child\">\n          <b>Selected:</b>\n          <SelectedNodeForm selectedNodeFormState={selectedNodeFormState} />\n        </div>\n      </div>\n      <br />\n      <div className=\"UIPanelContainer form-container\">\n        <UIPanel uiPanelState={uiPanelState} handler={Controller.getHandler()} />\n      </div>\n      <br />\n      <b>All nodes:</b>\n      <AllNodesTable allNodesTableState={allNodesTableState} handler={Controller.getHandler()} />\n\n      {popupEditorState.visible ? <PopupEditor popupEditorState={popupEditorState} handler={Controller.getHandler()} /> : null}\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}